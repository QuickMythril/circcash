pairfunctor:=function(arm)
local n,m,nn,list,invlist,superarm,i,j,aa;

n:=Length(arm);
m:=Length(arm[1]);
nn:=n*(n-1)/2;

list:=[]; for i in [1..n] do for j in [1..i-1] do Add(list,[i,j]); od; od;
invlist:=[]; for i in [1..n] do invlist[i]:=List([1..n],v->0); od; for i in [1..nn] do invlist[list[i][1]][list[i][2]]:=i; invlist[list[i][2]][list[i][1]]:=i; od;

superarm:=[]; for i in [1..nn] do superarm[i]:=[]; aa:=list[i]; for j in [1..m] do  superarm[i][j]:=invlist[arm[aa[1]][j]][arm[aa[2]][j]]; od; od;

return superarm;
end;

spectralscore:=function(nar,testvalues,pairs)
local list,n,kk,newlist,i,j,m;

list:=StructuralCopy(testvalues);
n:=Length(list);
m:=Length(pairs[1]);
for kk in [1..nar] do
newlist:=[];
for i in [1..n] do
newlist[i]:=0;
for j in [1..m] do 
newlist[i]:=newlist[i]+list[pairs[i][j]];
od;
od;
list:=newlist;
od;
return Sum(List(list,AbsInt)); 
end;

norm:=function(x)
if IsInt(x) then return AbsInt(x); else return
Sum(List(x,norm));
fi;
end;

sqfastmatrixproduct:=function(x,y) local z,i,j,k,n; 
if IsInt(y) then return x*y; fi;
n:=Length(x); z:=[]; for i in [1..n] do z[i]:=[]; for k in [1..n] do z[i][k]:=0; for j in [1..n] do if x[i][j]=1 then z[i][k]:=z[i][k]+y[j][k]; elif x[i][j]=-1 then z[i][k]:=z[i][k]-y[j][k]; elif not x[i][j]=0 then return false; fi; od; od; od; return z; end;


tensorspectralscore:=function(nar,matrixlist,testvalues,pairs)
local list,n,kk,newlist,i,j,m;

list:=StructuralCopy(testvalues);
n:=Length(list);
m:=Length(pairs[1]);
for kk in [1..nar] do
newlist:=[];
for i in [1..n] do
newlist[i]:=0;
for j in [1..m] do 
#newlist[i]:=newlist[i]+matrixlist[j]*list[pairs[i][j]];
newlist[i]:=newlist[i]+sqfastmatrixproduct(matrixlist[j],list[pairs[i][j]]);
od;
od;
list:=newlist;
od;
return norm(list);
end;


ntss:=function(normalizer,nar,matrixlist,testvalues,pairs)
z:=StructuralCopy(normalizer);
for k in [1..nar] do
newz:=matrixlist[1]*z*TransposedMat(matrixlist[1]);
for ll in [1..Length(matrixlist)] do
newz:=newz+matrixlist[ll]*z*TransposedMat(matrixlist[ll]));
od;
z:=newz;
od;
return norm(z);
end;



pairscore:=function(nar,testvalues,arm)
return spectralscore(nar,testvalues,pairfunctor(arm));
end;


shift:=function(list) local i,newlist,n; n:=Length(list); newlist:=[]; if n=0 then return newlist; fi; for i in [2..n] do newlist[i]:=list[i-1]; od; newlist[1]:=list[n]; return newlist; end;

map:=function(n,x) local i,list; list:=[]; for i in Reversed([1..n]) do if x>2^(i-1) then x:=x-2^(i-1); list[i]:=1; else list[i]:=0; fi; od; return list; end;

invmap:=function(list) if Length(list)=0 then return 1; fi;
return 1+list*List([0..Length(list)-1],v->2^v); end;

onemodulo:=function(x,y) return RemInt(x-1,y)+1; end;


marksplit:=function(list) local n,output,i,j; n:=LogInt(Length(list),2); output:=[]; for i in [1..n] do output[i]:=[]; for j in [1..2^(i-1)] do output[i][j]:=Remove(list); od; od; return Reversed(output); end;

bitstopairs:=function(oldlist)
local list,n,logn,pairs,i,mapi,j,mar,k;

n:=Length(oldlist);
logn:=LogInt(n,2);
list:=marksplit(StructuralCopy(oldlist));

pairs:=[];
for i in [1..n] do
pairs[i]:=[];

mapi:=shift(map(logn,i));

for j in [1..logn] do
mar:=[];
for k in [j+1..logn] do
Add(mar,mapi[k]);
od;
mapi[j]:=RemInt(mapi[j]+list[j][invmap(mar)],2);
od;
pairs[i][1]:=invmap(mapi);
mapi[1]:=1-mapi[1];
pairs[i][2]:=invmap(mapi);
od;

return pairs;
end;

nn:=128;

population:=List([1..100],v->Concatenation([1..nn/2]*0,[1..nn/2]*0+1));

testvalues:=[1..nn*(nn-1)/2]*0; 

for i in [1..nn*(nn-1)/2] do a:=Random([1..nn*(nn-1)/2]); testvalues[a]:=testvalues[a]+1; a:=Random([1..nn*(nn-1)/2]); testvalues[a]:=testvalues[a]-1; od;

while true do 
for i in [1..100] do
new:=[];
a:=Random([1..10]);
b:=Random([1..10]);
for j in [1..nn] do
if Random([true,false]) then new[j]:=population[a][j]; else new[j]:=population[b][j]; fi;
od;
c:=Random([1..nn]); new[c]:=1-new[c];
Add(population,new);
od;

testvalues:=[1..nn*(nn-1)/2]*0; 
for i in [1..nn*(nn-1)/2] do a:=Random([1..nn*(nn-1)/2]); testvalues[a]:=testvalues[a]+1; a:=Random([1..nn*(nn-1)/2]); testvalues[a]:=testvalues[a]-1; od;

SortBy(population,v->pairscore(100,testvalues,bitstopairs(v)));

while Length(population)>10 do Remove(population); od;

#kk:=1000;
#Display(pairscore(kk,testvalues,bitstopairs(population[1]))^(1./kk));

axe:=[]; 
for i in [1..10] do
axe[i]:=[];
for j in [1..nn] do if population[i][j]=1 then axe[i][j]:='T'; else axe[i][j]:=' '; fi; od;
od;
Display(axe);
od;

fixedpoints:=function(pair) local n,output,i,j; n:=Length(pair); output:=[]; for i in [1..n] do for j in [1..2] do if pair[i][j]=i then Add(output,[i,j-1]); fi; od; od; return output; end;

normalform:=function(pair) local aa,output,bb,lar,kk,fix,nn,n,a,list,invlist,totality; fix:=fixedpoints(pair); nn:=Length(pair); n:=LogInt(nn,2); totality:=[]; for a in fix do aa:=a[1]; list:=[]; invlist:=[]; for i in [1..nn] do lar:=map(n,i); bb:=aa; for kk in Reversed([1..n]) do bb:=pair[bb][lar[kk]+1]; od; list[i]:=bb; invlist[bb]:=i; od; output:=[]; for i in [1..nn] do output[i]:=[]; for j in [1..2] do output[i][j]:=invlist[pair[list[i]][j]]; od; od; Add(totality,output); od; return totality; end;

makebinaryfunction:=function(pair,bit,x) return map(Length(x),pair[invmap(x)][bit+1]); end;

inverter:=function(pair) local n,newpair,i; n:=Length(pair); newpair:=[]; for i in [1..n] do newpair[i]:=[]; od; for i in [1..n] do for j in [1,2] do newpair[pair[i][j]][j]:=i; od; od; return newpair; end;

completenormalform:=function(pair) return Concatenation(normalform(pair),normalform(inverter(pair))); end;

fixedtype:=function(pair) local n,output; n:=Length(pair); output:=[]; if pair[1][1]=1 then Add(output,0); fi; if pair[n][2]=n then Add(output,1); fi; return output; end;

randomform:=function(pair) local aa,output,bb,lar,kk,fix,nn,n,a,list,invlist,totality; nn:=Length(pair); n:=LogInt(nn,2); aa:=Random([1..nn]); list:=[]; invlist:=[]; for i in [1..nn] do lar:=map(n,i); bb:=aa; for kk in Reversed([1..n]) do bb:=pair[bb][lar[kk]+1]; od; list[i]:=bb; invlist[bb]:=i; od; output:=[]; for i in [1..nn] do output[i]:=[]; for j in [1..2] do output[i][j]:=invlist[pair[list[i]][j]]; od; od; return output; end;

bitfliptest:=function(pair) local qtip,n,nn,c,i,xx,yy,hh,aa; qtip:=randomform(pair); n:=Length(pair); nn:=LogInt(n,2); c:=0; for i in [1..n] do hh:=Random([0,1]); xx:=map(nn,i); yy:=StructuralCopy(xx); aa:=Random([1..nn]); yy[aa]:=1-yy[aa]; c:=c+Sum(List(makebinaryfunction(qtip,hh,xx)+makebinaryfunction(qtip,hh,yy),v->RemInt(v,2))); od; return c/n; end;

multibitfliptest:=function(rounds,pair) local qtip,n,nn,c,i,xx,yy,hh,aa; qtip:=randomform(pair); n:=Length(pair); nn:=LogInt(n,2); c:=0; for i in [1..n] do xx:=map(nn,i); yy:=StructuralCopy(xx); aa:=Random([1..nn]); yy[aa]:=1-yy[aa]; x:=invmap(xx); y:=invmap(yy); for jj in [1..rounds] do hh:=Random([1,2]); x:=qtip[x][hh]; y:=qtip[y][hh]; od; xx:=map(nn,x); yy:=map(nn,y); c:=c+Sum(List(xx+yy,v->RemInt(v,2))); od; return c/n; end;

fastmultibitfliptest:=function(rounds,mm,qtip) local n,nn,c,i,xx,yy,hh,aa; n:=Length(pair); nn:=LogInt(n,2); c:=0; for i in [1..mm] do xx:=map(nn,Random([1..n])); yy:=StructuralCopy(xx); aa:=Random([1..nn]); yy[aa]:=1-yy[aa]; x:=invmap(xx); y:=invmap(yy); for jj in [1..rounds] do hh:=Random([1,2]); x:=qtip[x][hh]; y:=qtip[y][hh]; od; xx:=map(nn,x); yy:=map(nn,y); c:=c+Sum(List(xx+yy,v->RemInt(v,2))); od; return c; end;

# The following function gives a (very low) value for a minimum number of rounds required for security.
bitfliproundcount:=function(pair) local maxshort,midcount,qtip,n,nn,lsize,round,maxcount,margin,tt; qtip:=randomform(pair); n:=Length(pair); nn:=LogInt(n,2); lsize:=1; round:=1; maxshort:=1; while lsize<=nn do Display([lsize,round]); round:=round+1; maxcount:=2^lsize*16; if lsize=nn then qtip:=randomform(pair); fi; midcount:=maxcount/2; margin:=Int(maxcount^0.5); tt:=fastmultibitfliptest(round,2^lsize,qtip); if tt>=midcount-margin and tt<=midcount+margin then if lsize=nn-1 then round:=maxshort; fi; lsize:=lsize+1; else maxshort:=round; fi; od; return round; end;


n:=16; gates:=function(list) list[16]:=RemInt(list[12]+list[16],2); list[15]:=RemInt(list[11]+list[15],2); list[9]:=RemInt(list[5]+list[9],2); list[3]:=RemInt(list[3]+list[4],2); list[2]:=RemInt(list[2]+list[6]*list[10],2); end; pair:=[]; for i in [1..2^n] do pair[i]:=[]; for j in [1,2] do list:=map(n,i); list[1]:=RemInt(list[1]+j-1,2); gates(list); list:=shift(list); pair[i][j]:=invmap(list); od; od; scoretest(pair); nar:=[]; for i in [1..2^n] do nar[i]:=[]; for j in [1,2] do nar[i][j]:=pair[pair[pair[pair[i][1]][1]][1]][j]; od; od; scoretest(nar);

