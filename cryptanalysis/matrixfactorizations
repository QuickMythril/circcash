# We factor the matrix with all 1's into a product of several 0-1 matrices.

sortscorefactorize:=function(array)
local n,i,j,c,newlist,list,mak;
n:=Length(array[1]);
list:=StructuralCopy(array[1]);
for k in [2..Length(array)] do
newlist:=[];
for i in [1..n] do 
newlist[i]:=[];
for a in array[k][i] do
Append(newlist[i],list[a]);
od;
od;
list:=newlist;
od;

c:=0;
for i in [1..n] do
Sort(list[i]);
mak:=[1..n]*0+1;
for j in [1..Length(list[i])-1] do
if list[i][j]=list[i][j+1] then c:=c+1; fi;
mak[list[i][j]]:=0;
od;
if Length(list[i])>0 then mak[list[i][Length(list[i])]]:=0; fi;
c:=c+Sum(mak);
od;

return c;
end;

# Here, the code factorizes the all 1's matrix into products of 0,1 matrices where the factors are always products of doubly stochastic matrices.
# In this case, the factorization of the 1's matrix into a product of 0,1 matrices is easier than if we do not require the factors to be doubly stochastic.

p:=2; nn:=6; n:=p^nn; 
list:=[]; for i in [1..n-1] do list[i]:=[i,i+1]; od; list[n]:=[n,1];
array:=List([1..nn],v->StructuralCopy(list));

ph:=sortscorefactorize(array);
while true do 
ii:=Random([1..n]); jj:=Random([1..nn]); SortBy(array[jj][ii],v->Random([1..n])); 
newarray:=StructuralCopy(array); a:=Random([1..n]); b:=a; 
while a=b do a:=Random([1..n]); od; 
kk:=Random([1..nn]); 
r:=Remove(newarray[kk][a]); s:=Remove(newarray[kk][b]); Add(newarray[kk][a],s); Add(newarray[kk][b],r); qh:=sortscorefactorize(newarray); 
if qh<=ph+Random([0..Random([0..Random([0..Random([0..10])])])]) then array:=newarray; ph:=qh; Display(ph); fi;
od;




# Here, the code factorizes the all 1's matrix into products of 0,1 matrices where the factors are not necessarily products of doubly stochastic matrices.
# In this case, the factorization of the 1's matrix into a product of 0,1 matrices is much more difficult.

n:=31;
nn:=3;
list:=[]; for i in [1..n] do list[i]:=[]; od;
array:=List([1..nn],v->StructuralCopy(list));
ph:=sortscorefactorize(array);
while true do 
ii:=Random([1..n]); jj:=Random([1..nn]); SortBy(array[jj][ii],v->Random([1..n])); 
newarray:=StructuralCopy(array); a:=Random([1..n]); b:=a; 
while a=b do a:=Random([1..n]); od; 
hakk:=0;
kk:=Random([1..nn]); 
if Random([1..2])>1 then 
if Length(newarray[kk][a])>0 and Length(newarray[kk][b])>0 then
r:=Remove(newarray[kk][a]); s:=Remove(newarray[kk][b]); Add(newarray[kk][a],s); Add(newarray[kk][b],r); 
fi;
else
if Random([true,false]) then
if Length(newarray[kk][a])>0 then Remove(newarray[kk][a]); 
hakk:=1;
fi;
else
if Length(newarray[kk][a])<n then Add(newarray[kk][a],Random(Difference([1..n],newarray[kk][a]))); hakk:=1;
fi;
fi;
fi;
qh:=sortscorefactorize(newarray); 
mah:=0;
if Random([1..1000])=1 then mah:=20; fi;
if qh<=ph+mah then array:=newarray; ph:=qh; Display([ph,hakk]); 
Display(Sum(List(array,v->Sum(List(v,Sum)))));
fi;
if ph=0 then break; fi;
od;

# The code listed below can be used to produce factorizations of 2^n by 2^n Hadamard matrices into the product of n different weighing matrices with weight 2.
# 
rev:=function(x) local n,y,i,a; n:=Length(x); y:=List([1..n],v->[]); for i in [1..64] do for a in x[i] do Add(y[a],i); od; od; return y; end;

ultrarev:=function(x) return Reversed(List(x,rev)); end;

x:=List([1..6],v->List([1..64],v->[onemodulo(2*v-1,64),onemodulo(2*v,64)]));

for j in [1..7] do for i in [1..6] do SortBy(x[i],v->Random([1..9^9])); od; x:=ultrarev(x); od;

p:=sortscorefactorize(x); while true do if Random([1..64])=1 then x:=ultrarev(x); p:=sortscorefactorize(x); fi; xx:=StructuralCopy(x); ii:=Random([1..6]); aa:=Random([1..64]); bb:=Random([1..64]); rr:=xx[ii][aa]; ss:=xx[ii][bb]; xx[ii][aa]:=ss; xx[ii][bb]:=rr; q:=sortscorefactorize(xx); if q<=p then x:=xx; p:=q; Display(p); fi; od;


rownormal:=function(a,x) local y,i,n; n:=Length(x); y:=x*0; for i in [1..n] do y[i][i]:=x[a][i]; od; return x*y; end;

columnnormal:=function(a,x) local y,i,n; n:=Length(x); y:=x*0; for i in [1..n] do y[i][i]:=x[i][a]; od; return y*x; end;

hadamardinvariant:=function(x) local n,c,a,b,y,k; n:=Length(x); c:=0; for a in [1..n] do for b in [1..n] do for k in [0,1] do y:=rownormal(a,columnnormal(b,x)); if k=1 then y:=TransposedMat(y); fi; c:=c+Sum(List(y,v->RemInt(3*(n+Sum(v))/2,n)^3))^2; od; od; od; return c; end;

makehadamard:=function(list) local a,n,lam,unlist,mik,xx; n:=Length(list); lam:=[1..n]; SortBy(lam,v->Random([1..1000])); unlist:=Unique(list); mik:=[1..n]*0+1; xx:=List([1..n],v->[1..n]*0); for a in lam do xx[a][list[a][1]]:=1; xx[a][list[a][2]]:=1;  if mik[list[a][1]]=1 then mik[list[a][1]]:=0; xx[a][list[a][Random([1,2])]]:=-1; fi; od; return xx; end;


