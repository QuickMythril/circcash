fulltest:=function(list) local n,nn,i,j,sink; 
n:=Length(list); nn:=LogInt(n,2); 
for i in [1..n] do sink:=[i]; 
for j in [1..nn] do 
sink:=Concatenation(List(sink,v->list[v][1]),List(sink,v->list[v][2])); od; 
for j in [1..n-1] do if sink[j]=sink[j+1] then return false; fi; od; 
od; return true; end;

quicktest:=function(rounds,list) local n,nn,i,j,sink; n:=Length(list); nn:=LogInt(n,2); 
for i in [1..rounds] do sink:=[Random([1..n])]; for j in [1..nn] do sink:=Concatenation(List(sink,v->list[v][1]),List(sink,v->list[v][2])); od; 
Sort(sink); for j in [1..n-1] do if sink[j]=sink[j+1] then return false; fi; od; od; return true; end;

shift:=function(list) local i,newlist,n; n:=Length(list); newlist:=[]; for i in [2..n] do newlist[i]:=list[i-1]; od; newlist[1]:=list[n]; return newlist; end;

map:=function(n,x) local i,list; list:=[]; for i in Reversed([1..n]) do if x>2^(i-1) then x:=x-2^(i-1); list[i]:=1; else list[i]:=0; fi; od; return list; end;

invmap:=function(list) return 1+list*List([0..Length(list)-1],v->2^v); end;

onemodulo:=function(x,y) return RemInt(x-1,y)+1; end;

split:=function(list) local n,i,arm; n:=Length(list)/2; arm:=[[],[]]; for i in [1..n] do arm[1][i]:=list[i]; arm[2][i]:=list[n+i]; od; return arm; end;
