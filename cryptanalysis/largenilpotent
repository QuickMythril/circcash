fulltest:=function(list) local n,nn,i,j,sink; 
n:=Length(list); nn:=LogInt(n,2); 
for i in [1..n] do sink:=[i]; 
for j in [1..nn] do 
sink:=Concatenation(List(sink,v->list[v][1]),List(sink,v->list[v][2])); od; 
for j in [1..n-1] do if sink[j]=sink[j+1] then return false; fi; od; 
od; return true; end;

quicktest:=function(rounds,list) local n,nn,i,j,sink; n:=Length(list); nn:=LogInt(n,2); 
for i in [1..rounds] do sink:=[Random([1..n])]; for j in [1..nn] do sink:=Concatenation(List(sink,v->list[v][1]),List(sink,v->list[v][2])); od; 
Sort(sink); for j in [1..n-1] do if sink[j]=sink[j+1] then return false; fi; od; od; return true; end;

scoretest:=function(array) 
local a,p,n,list,i,k,newlist,j,c,nn; 
p:=Primes[Random([40..168])]; n:=Length(array); nn:=LogInt(n,Length(array[1]));
if not Length(array[1])^nn=n then return n; fi;

list:=[]; 
for i in [1..n] do list[i]:=Random(GF(p)); od; list[1]:=list[1]-Sum(list); 
for k in [1..nn] do newlist:=[]; 
for j in [1..n] do newlist[j]:=0; 
for a in array[j] do 
newlist[j]:=newlist[j]+list[a]; 
od; od; 
list:=newlist;  
od; 
c:=0;
for i in [1..n] do if not list[i]=list[i]*0 then c:=c+1; fi; od;
return c;
end;


shift:=function(list) local i,newlist,n; n:=Length(list); newlist:=[]; for i in [2..n] do newlist[i]:=list[i-1]; od; newlist[1]:=list[n]; return newlist; end;

map:=function(n,x) local i,list; list:=[]; for i in Reversed([1..n]) do if x>2^(i-1) then x:=x-2^(i-1); list[i]:=1; else list[i]:=0; fi; od; return list; end;

invmap:=function(list) return 1+list*List([0..Length(list)-1],v->2^v); end;

onemodulo:=function(x,y) return RemInt(x-1,y)+1; end;

split:=function(list) local n,i,arm; n:=Length(list)/2; arm:=[[],[]]; for i in [1..n] do arm[1][i]:=list[i]; arm[2][i]:=list[n+i]; od; return arm; end;

p:=2; nn:=6;; n:=p^nn; list:=List([1..100],u->List([1..n],v->[onemodulo((v-1)*p+1,n)..onemodulo(v*p,n)]));;

har:=8;
while Length(list)>0 do 
qrr:=Minimum(har,Length(list));
al:=Random([1..2]);
bl:=Random([1..2]);
a:=Random([1..n]); b:=a; 
while a=b do a:=Random([1..n]); od; 
x:=StructuralCopy(Random(list));
r:=x[a][al]; s:=x[b][bl]; x[a][al]:=s; x[b][bl]:=r; 
if r=s then continue; fi;
if quicktest(qrr,x) then
for ii in [1..Length(list)] do 
x:=StructuralCopy(list[ii]);
r:=x[a][al]; s:=x[b][bl]; x[a][al]:=s; x[b][bl]:=r; 
if quicktest(qrr,x) then Add(list,x); fi;
od;
newlist:=[];
for a in list do if quicktest(qrr,a) then Add(newlist,a); fi; od;
if Length(newlist)=0 then newlist:=list; fi;
SortBy(newlist,v->Random([1..9^9]));
list:=newlist;
while Length(list)>100 do Remove(list); od;
#while Length(list)>100 and Random([1..Maximum(50,Length(list)-100)])>1 do Remove(list); od;
if Random([1..10])=1 then
xx:=List([1..n],v->[1..n]*0); mar:=Random([1..Length(list)]); for iig in [1..n] do for aag in list[mar]
[iig] do xx[iig][aag]:=1; od; od; Display(xx*Z(2)); Display(Length(list));
fi;
fi;
od;

p:=2; nn:=6;; n:=p^nn; list:=List([1..100],u->List([1..n],v->[onemodulo((v-1)*p+1,n)..onemodulo(v*p,n)]));;
ph:=1;
while true do 
if Random([1..100])=1 then ph:=scoretest(Random(list)); fi;

al:=Random([1..2]);
bl:=Random([1..2]);
a:=Random([1..n]); b:=a; 
while a=b do a:=Random([1..n]); od; 
x:=StructuralCopy(Random(list));
r:=x[a][al]; s:=x[b][bl]; x[a][al]:=s; x[b][bl]:=r; 
if r=s then continue; fi;
qh:=scoretest(x);
if qh<=ph then
#Display(ph);
for ii in [1..100] do 
x:=StructuralCopy(list[ii]);
r:=x[a][al]; s:=x[b][bl]; x[a][al]:=s; x[b][bl]:=r; 
if scoretest(x)<=ph then 
if Random([1..2])=1 then Add(list,x); else list[ii]:=x; fi;

#Print("+");
else
#Print(" ");
fi;
od;
#Display("!");
while Length(list)>100 do list[Random([1..100])]:=Remove(list); od;
if Random([1..10])=1 then 
xx:=List([1..n],v->[1..n]*0); mar:=Random([1..100]); for iig in [1..n] do for aag in list[mar]
[iig] do xx[iig][aag]:=1; od; od; Display(xx*Z(2)); Display(ph);
fi;
ph:=qh;
fi;
od;

randmap:=function(list) local n,i; n:=Length(list); for i in [2..n] do list[i]:=RemInt(23*list[i]+37*list[i-1],727); od; for i in Reversed([1..n-1]) do list[i]:=RemInt(47*list[i]+17*list[i+1],109); od; return RemInt(Sum(list),2); end;

promote:=function(randmap,list) local n,i,j,mar; n:=Length(list); for i in [1..n] do mar:=[]; for j in [i+1..n] do Add(mar,list[j]); od; list[i]:=RemInt(list[i]+randmap(mar),2); od; return list; end;

inversepromote:=function(randmap,list) local n,i,j,mar; n:=Length(list); for i in Reversed([1..n]) do mar:=[]; for j in [i+1..n] do Add(mar,list[j]); od; list[i]:=RemInt(list[i]+randmap(mar),2); od; return list; end;

roundmap:=function(randmap,bit,list) local newlist; newlist:=promote(randmap,shift(list)); newlist[1]:=RemInt(newlist[1]+bit,2); return newlist; end;

invshift:=function(list) local i,newlist,n; n:=Length(list); newlist:=[]; for i in [1..n-1] do newlist[i]:=list[i+1]; od; newlist[n]:=list[1]; return newlist; end;

invroundmap:=function(randmap,bit,list) local newlist,midlist; midlist:=StructuralCopy(list); midlist[1]:=RemInt(midlist[1]+bit,2); return invshift(inversepromote(randmap,midlist)); end;

fixedpoint:=function(bit,n,randmap) local list,i,mar,j; list:=[]; list[n]:=bit; for i in Reversed([1..n-1]) do mar:=[]; for j in [i+1..n-1] do Add(mar,list[j]); od; list[i]:=RemInt(list[i+1]+randmap(mar),2); od; return list; end;



