// Here we running tests to prove that the round functions for Hashspin generate the alternating group. We start by showing that the group generated by the round permutations
// for hashspin is transitive. We then use theorems from group theory to conclude that the group is actually alternating.

// Example program
#include <iostream>
#include <string>


unsigned int hashspincc(unsigned int x){return (x<<17)>>17;}

unsigned int hashspindd(unsigned int x){return x>>15;}

unsigned int hashspinrecombine(unsigned int cc,unsigned int dd){
return cc+(dd<<15);
}

// The following function returns 42 after proving that the group generated by the two round permutations of hashspin is transitive. The function transitivitytest() requires very little memory, but one can trade memory for time to make this function run faster or use less space.

unsigned int transitivitytest()
{
unsigned int cc,dd,ccc,ddd,lar,point,ii;

for (ii=0;ii<=4294967295;ii++){

if ((ii%10000)==0){std::cout <<ii<< "!\n";}

cc=hashspincc(ii);
dd=hashspindd(ii);

while(true) {
lar=rand()%4;
if (lar>1){lar^=18;}
cc=((cc<<8)|(cc>>7))&32767;
dd=((dd<<8)|(dd>>9))&131071;
ccc=cc<<24;
ddd=dd<<24;
cc^=(ccc>>23)^((ccc>>21)&(ddd>>21));
dd^=(ddd>>21)^(ccc>>23);
cc^=lar<<2;
point=(point>>2);

if ((cc==0) & (dd>0)){
break;
}

if (hashspinrecombine(cc,dd)<ii){
if (ii==4294967295){return 42;} break;}
   }


}
}

int main()
{

transitivitytest();

unsigned int cc,dd,ccc,ddd,lar,point,ii,jj,n;

cc=0;
dd=0;
n=4;

unsigned int tabby[n];

tabby[0]=0;
tabby[1]=2;
tabby[2]=3;
tabby[3]=3;

for (ii=1;ii<4294967295;ii++){
if ((ii%1000000)==0){std::cout <<ii<<"\n";}
for (jj=0;jj<n;jj++){
lar=tabby[jj];
if (lar>1){lar^=18;}
cc=((cc<<8)|(cc>>7))&32767;
dd=((dd<<8)|(dd>>9))&131071;
ccc=cc<<24;
ddd=dd<<24;
cc^=(ccc>>23)^((ccc>>21)&(ddd>>21));
dd^=(ddd>>21)^(ccc>>23);
cc^=lar<<2;
point=(point>>2);
}


if ((cc==0)&(dd==0)){break;}
}

std::cout <<ii<< "!\n";

// The above code produces a permutation in the group generated by the round functions of Hashspin of order ii. Observe that ii is a prime number with
// 2^(32)/2<ii<2^(32)-2. We can therefore conclude that the round permutations in
// Hashspin generate the alternating group by the following theorem and the fact that the round permutations in Hashspin are alternating.

// Theorem: Suppose that G is a subset of the permutation group S_n that is transitive and contains a permutation of prime order p such that
// n/2<p<n-2 and p>7. Then G is either the alternating group A_n or the permutation group S_n.


std::cout <<"yay"<< "!\n";


}
